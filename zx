<!doctype html>
<html lang="fi">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>LIVE TRACE</title>
<style>
  :root{
    --bg:#000;
    --fg:#00ff66;
    --mackey:url("https://pbs.twimg.com/profile_images/378800000507673001/404aa9c0b0757106dc4d563891abed3a_400x400.png");
  }
  html,body{height:100%;margin:0;background:var(--bg);font-family:Consolas,monospace;color:var(--fg);}
  .center{display:flex;height:100%;align-items:center;justify-content:center;padding:20px;}
  .window{
    width:min(92vw,1100px);height:min(86vh,640px);background:rgba(0,0,0,0.96);
    border-radius:10px;box-shadow:0 0 40px rgba(0,0,0,0.8);overflow:hidden;position:relative;
    border:1px solid rgba(0,255,128,0.06);
  }
  .title{height:42px;padding:8px 14px;background:#070707;color:#c8ffd9;display:flex;align-items:center;gap:10px;border-bottom:1px solid rgba(255,255,255,0.03)}
  .content{padding:12px;color:var(--fg);font-size:13px;line-height:1.35;white-space:pre-wrap;height:calc(100% - 42px);overflow:auto}
  .line{display:block}

  .overlay{
    position:fixed;inset:0;display:flex;align-items:center;justify-content:center;
    background:rgba(0,0,0,0.85);z-index:60;opacity:0;pointer-events:none;transition:opacity .25s;
  }
  .reveal-card{
    width:min(90vw,760px);height:min(80vh,520px);border-radius:12px;overflow:hidden;
    display:flex;align-items:center;justify-content:center;position:relative;flex-direction:column;padding:24px;
    background:linear-gradient(rgba(0,0,0,0.55), rgba(0,0,0,0.55)), var(--mackey);
    background-size:cover;background-position:center;
    border:2px solid rgba(0,255,128,0.14);
    box-shadow:0 10px 40px rgba(0,0,0,0.6);
  }
  .reveal-card h1{color:#fff;margin:0 0 8px 0;font-size:36px;text-shadow:0 2px 20px rgba(0,0,0,0.6)}
  .reveal-card p{color:#dff;margin:0;font-size:20px}
  .smallnote{margin-top:12px;color:#bff;font-size:13px;opacity:0.9}
  .close-btn{margin-top:18px;padding:8px 14px;border-radius:10px;border:1px solid #1f3;background:#002200;color:#c8ffd9;cursor:pointer}

  .ending{
    position:fixed;inset:0;display:flex;align-items:center;justify-content:center;
    background:rgba(0,0,0,0.92);z-index:70;opacity:0;pointer-events:none;transition:opacity .25s;
  }
  .ending-card{
    border:2px solid rgba(0,255,128,0.2);background:#051006;border-radius:14px;
    padding:28px 34px;text-align:center;max-width:760px;color:#eafff1;box-shadow:0 10px 40px rgba(0,0,0,0.6);
    font-family:system-ui,Segoe UI,Roboto,Arial;
  }
  .ending-card h2{margin:0;font-size:60px}
</style>
</head>
<body>
  <div class="center">
    <div class="window">
      <div class="title">LIVE TRACE</div>
      <div id="content" class="content" aria-live="polite"></div>
    </div>
  </div>

  <div id="overlay" class="overlay" aria-hidden="true">
    <div class="reveal-card">
      <h1>Collecting data is bad, mâ€™kay</h1>
      <p>Donâ€™t let them harvest your voice & time â€” think twice before sharing.</p>
      <div class="smallnote">This is a harmless prank / simulation. No data was collected.</div>
      <button class="close-btn" id="closeBtn">Palaa todellisuuteen</button>
    </div>
  </div>

  <div id="ending" class="ending" aria-hidden="true">
    <div class="ending-card">
      <h2>Just joking ðŸ˜„</h2>
    </div>
  </div>

<script>
const out = document.getElementById('content');
const overlay = document.getElementById('overlay');
const ending = document.getElementById('ending');
const closeBtn = document.getElementById('closeBtn');

function r(min,max){return Math.floor(Math.random()*(max-min+1))+min;}
function hx(len){return [...Array(len)].map(()=> "0123456789abcdef"[Math.floor(Math.random()*16)]).join('');}
function ip(){const pools=[()=>`10.${r(0,255)}.${r(0,255)}.${r(1,254)}`,()=>`192.168.${r(0,255)}.${r(1,254)}`,()=>`203.0.113.${r(1,250)}`];return pools[Math.floor(Math.random()*pools.length)]();}
function mac(){return Array(6).fill(0).map(()=>hx(2)).join(':').toUpperCase();}
function file(){const n=["data","secrets","contracts","backup","transactions"];const e=["csv","sql","json","bin"];return `${n[r(0,n.length-1)]}_${r(2020,2025)}.${e[r(0,e.length-1)]}`;}

function makeLines(n=100){
  const lines=[];
  for(let i=0;i<n;i++){
    if(i%3===0)lines.push(`[TRACE] route ${ip()} -> ${ip()} -> ${ip()}`);
    else if(i%3===1)lines.push(`[SCAN] host ${ip()} (${mac()})  status: ALIVE`);
    else lines.push(`[FILE] /srv/${file()}  hash:${hx(16)} size:${r(10,500)}MB`);
  }
  return lines;
}

const EARLY_REVEAL_MS = 2500;
const MIN_TOTAL_MS = 5000;

const start = Date.now();
let earlyShown = false;

(async ()=>{
  const lines = makeLines(110);
  for(const l of lines){
    const el=document.createElement('div');
    el.className='line';
    el.textContent=l;
    out.appendChild(el);
    out.scrollTop=out.scrollHeight;
    await new Promise(res=>setTimeout(res, 5));
    if(!earlyShown && (Date.now()-start)>=EARLY_REVEAL_MS){
      earlyShown = true;
      overlay.style.opacity='1';
      overlay.style.pointerEvents='auto';
    }
  }
  if(!earlyShown){
    const remain = Math.max(0, EARLY_REVEAL_MS - (Date.now()-start));
    await new Promise(res=>setTimeout(res, remain));
    overlay.style.opacity='1';
    overlay.style.pointerEvents='auto';
    earlyShown = true;
  }
  const elapsed = Date.now()-start;
  if(elapsed < MIN_TOTAL_MS){
    await new Promise(res=>setTimeout(res, MIN_TOTAL_MS - elapsed));
  }
})();

closeBtn.onclick = async ()=>{
  overlay.style.opacity='0';
  overlay.style.pointerEvents='none';

  const burst = makeLines(55);
  for(const l of burst){
    const el=document.createElement('div');
    el.className='line';
    el.textContent=l;
    out.appendChild(el);
    out.scrollTop=out.scrollHeight;
    await new Promise(res=>setTimeout(res, 8));
  }
  await new Promise(res=>setTimeout(res, 2000)); // +2s lisÃ¤viive

  ending.style.opacity='1';
  ending.style.pointerEvents='auto';

  ending.addEventListener('click', ()=>{
    ending.style.opacity='0';
    ending.style.pointerEvents='none';
  }, { once:true });
};
</script>
</body>
</html>
